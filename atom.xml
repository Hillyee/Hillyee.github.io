<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hillyee-blog</title>
  
  
  <link href="https://hillyee.github.io/atom.xml" rel="self"/>
  
  <link href="https://hillyee.github.io/"/>
  <updated>2022-03-30T06:38:47.764Z</updated>
  <id>https://hillyee.github.io/</id>
  
  <author>
    <name>Hillyee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于浏览器工作原理和JS引擎</title>
    <link href="https://hillyee.github.io/2022/03/30/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%20JS%20%E5%BC%95%E6%93%8E/"/>
    <id>https://hillyee.github.io/2022/03/30/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%20JS%20%E5%BC%95%E6%93%8E/</id>
    <published>2022-03-30T06:34:31.254Z</published>
    <updated>2022-03-30T06:38:47.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-从输入-URL-到页面展示-发生了什么？">1. 从输入 URL 到页面展示 发生了什么？</h3><p>​总体分为以下过程：</p><ul><li>DNS 域名解析：将域名解析成 IP 地址</li><li>TCP 连接：TCP 三次握手</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>断开连接：TCP 四次挥手</li></ul><h3 id="2-浏览器工作原理">2. 浏览器工作原理</h3><p>在浏览器中输入查找内容，浏览器是怎样将页面加载出来的？</p><p>大致流程如下：</p><ul><li>首先，用户输入服务器地址，与服务器建立连接</li><li>服务器返回对应的静态资源（index.html）</li><li>然后浏览器拿到 index.html 后进行解析</li><li>当解析时遇到 css 或 js 文件，就向服务器请求并下载对应的 css 和 js 文件</li><li>最后浏览器对页面进行渲染，执行 js 代码</li></ul><h3 id="3-浏览器渲染过程">3. 浏览器渲染过程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fceb0c8f81764c578d11e3b428d9ec61~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325160129577.png"></p><ol><li><p>HTML Parser 将 HTML解析转换成 DOM 树</p></li><li><p>CSS Parser 将 样式表转换成 CSS 规则树</p></li><li><p>合并 DOM 树和 CSS 规则树，生成 render（渲染） 树</p></li><li><p>布局 render 树（Layout）</p><p>通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸</p></li><li><p>绘制 render 树（painting），进行 Display 展示</p></li></ol><p>注意图中顶部的紫色 DOM 三角形，实际上是 js 对 DOM 的相关操作。</p><h3 id="4-一个强大的-JavaScript-引擎-—-V8-引擎">4. 一个强大的 JavaScript 引擎 — V8 引擎</h3><p>在解析 HTML 的过程中，遇到了 JavaScript 标签，该怎么办呢？</p><ul><li>会停止解析 HTML ，而去加载和执行 JavaScript 代码</li></ul><p>那么，JavaScript 代码由谁来执行呢？</p><ul><li><p>JavaScript 引擎</p><p>高级的编程语言最终都要转成机器指令来执行的，</p><p>所以我们需要 JavaScript 引擎帮助我们将 JavaScript 代码翻译成 CPU 指令来执行</p></li></ul><h4 id="（1）V8-引擎的架构">（1）<strong>V8 引擎的架构</strong></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5b0f83a00e64e2587ab3d79a4c524fd~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325165859884.png"></p><p>V8 的底层架构主要有三个核心模块（Parse、Ignition、TurboFan）</p><p><strong>1. Parse</strong>：</p><p>该过程主要是对 JavaScript 源代码进行<strong>词法分析</strong>和<strong>语法分析</strong>。</p><p><strong>词法分析</strong>：对代码中的每一个词每一个符号进行解析，最终生成很多 tokens</p><p>例如：对 const name = “curry”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先对const进行解析，因为const为一个关键字，所以类型会被记为一个关键词，值为const</span></span><br><span class="line"><span class="attr">tokens</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着对name进行解析，因为name为一个标识符，所以类型会被记为一个标识符，值为name</span></span><br><span class="line"><span class="attr">tokens</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;identifier&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;name&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以此类推...</span></span><br></pre></td></tr></table></figure><p><strong>语法分析</strong>：在词法分析的基础上，拿到 tokens 中的一个个对象，根据不同类型，再进一步分析具体语法，最终生成 AST 抽象语法树</p><p>可以详细查看通过 Parse 转换后的 AST 的工具：AST Explorer</p><p><strong>2. Ignition</strong></p><p>一个解析器，可以将 AST 转换成 ByteCode（字节码）</p><p><strong>3. TurboFan</strong></p><p>一个编译器，可以将字节码编译为 CPU 认识的机器码</p><h4 id="（2）V8-引擎的执行过程">（2）V8 引擎的执行过程</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f816f1a12884ef6bf8fe4ffec33a2ce~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325171051967.png"></p><ul><li>Blink 内核将 JS 源码交给 V8 引擎</li><li>Stream 获取到 JS 源码进行编码转换</li><li>Scanner 进行词法分析，将代码转换成 tokens</li><li>Parser 和 PreParser<ul><li>Parser ：直接解析，将 tokens 转成 AST 树</li><li>PreParser：预解析，对不必要的函数进行预解析，也就是只解析暂时需要的内容，而在函数被调用时才进行函数的全量解析</li></ul></li><li>生成 AST 树后，会被 Ignition 转成字节码，之后就是代码的执行过程</li></ul><h3 id="5-JavaScript-的执行过程">5. JavaScript 的执行过程</h3><p>假如要执行如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">30</span></span><br><span class="line"><span class="keyword">var</span> result = num1 + num2</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p>（1）首先，<strong>代码被解析</strong>，V8 引擎内部会帮助我们创建一个全局对象：Global Object（GO）</p><ul><li><p>GO 可以访问所有的作用域</p></li><li><p>里面会包含 Date、Array、String、setTimeout等等（所以我们可以直接 new Date() ）</p></li><li><p>GO 还有一个window 属性指向自己（所以window.window.window还是指向 GO自己）</p></li></ul><p>用伪代码表示为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalObject = &#123;</span><br><span class="line">    <span class="title class_">String</span>: 类,</span><br><span class="line">    <span class="attr">setTimeout</span>: 函数,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">window</span>: globalObject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）<strong>然后运行代码</strong></p><ol><li><p>首先我们要知道 js 引擎内部有一个<strong>执行上下文栈</strong>（Execution Context Stack，简称 ESC），它是用于执行代码的调用栈。</p></li><li><p>为了全局代码能够正常执行，首先需要创建一个**全局执行上下文 **（Global Execution Context，简称GEC），全局代码需要被执行时才会创建</p></li><li><p>然后全局执行上下文会被放入执行上下文栈中执行，包含两个部分：</p><ul><li>在代码执行前，会将全局定义的变量，函数等加入到 <strong>GlobalOject</strong> 中，但是并不会赋值（也称为<strong>变量的作用域提升</strong>）</li></ul></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/848e146926d641b99e2b502e31c08913~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325191605422.png"></p><ul><li><p>开始依次执行代码：</p><p>title = “hello” // 赋值</p><p>console.log(num1) // undefined, 不会报错</p><p>num1= 20 …</p></li></ul><p><strong>遇到函数如何执行?</strong></p><p>先根据函数体创建一个<strong>函数执行上下文</strong>，并且压入到执行上下文栈中</p><p><strong>作用域链？</strong></p><p>由 VO(变量对象，在函数中就是 AO 对象)和 父级 VO组成，查找时会一层层查找</p><p>看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello Global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message) <span class="comment">// Hello Global</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;Hello Bar&quot;</span></span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><p>比如说这里，当执行 foo 函数的时候， foo 的 AO 中没有message，就会去它的父级 VO 中查找。一定要注意！当第一次代码解析的时候， foo 的函数执行上下文就已经确定了，其中包括三部分：</p><ul><li><p>第一部分：在解析函数成为 AST 树结构的时候，会创建一个 AO（Activation）</p><p>其中包含形参、arguments、函数定义、指向函数对象或定义的变量</p></li><li><p>第二部分：就是作用域链</p></li><li><p>第三部分：this 绑定的值</p></li></ul><p>因此！当foo在自己的AO找不到message的时候，去父级 VO 找，这个父级 VO 就是一开始解析时候保存的 GO，所以message为 “Hello Global”</p><p>简单描述一下这个过程吧：(我不专业的表达)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 GO</span></span><br><span class="line"><span class="attr">GO</span>: &#123;<span class="variable language_">window</span>; <span class="attr">message</span>:<span class="literal">undefined</span>; <span class="attr">foo</span>: 地址<span class="number">1</span>; <span class="attr">bar</span>: 地址<span class="number">2</span>;&#125;</span><br><span class="line"><span class="comment">// 执行代码</span></span><br><span class="line"><span class="attr">GO</span>: &#123;<span class="variable language_">window</span>; <span class="attr">message</span>:<span class="string">&quot;Hello Global&quot;</span>; <span class="attr">foo</span>: 地址<span class="number">1</span>; <span class="attr">bar</span>: 地址<span class="number">2</span>;&#125;</span><br><span class="line">bar函数执行,创建一个函数执行上下文,</span><br><span class="line">其中包括 <span class="variable constant_">VO</span>对象: <span class="attr">AO</span>:&#123;<span class="attr">message</span>: <span class="literal">undefined</span>&#125;</span><br><span class="line">然后开始执行 bar函数</span><br><span class="line"><span class="attr">message</span>:<span class="string">&quot;Hello Bar&quot;</span> (赋值)</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line">  foo函数执行，创建一个foo的函数执行上下文</span><br><span class="line">  其中包括：<span class="attr">VO</span>: <span class="attr">AO</span>: &#123;&#125; </span><br><span class="line">  然后开始执行代码</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">  发现自己的<span class="variable constant_">AO</span>没有message,会向上找，即从自己保存的父级<span class="variable constant_">VO</span>中查找，找到<span class="variable constant_">GO</span>中的message为 <span class="string">&quot;Hello Global&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5dfbf8412334fbfbec579813c39c58d~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325231532928.png"><br>(图来源于coderwhy)</p><h4 id="几道常见的作用域提升面试题：">几道常见的作用域提升面试题：</h4><ol><li><pre><code class="language-js">var n = 100function foo() &#123;  n = 200&#125;foo()console.log(n) // 200<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```js</span><br><span class="line">   function foo() &#123;</span><br><span class="line">     console.log(n) // undefined</span><br><span class="line">     var n = 200</span><br><span class="line">     console.log(n) // 200</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   var n = 100</span><br><span class="line">   foo()</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">var a = 100function foo() &#123;  console.log(a) // undefined  return  var a = 200&#125;foo()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ```js</span><br><span class="line">   function foo() &#123;</span><br><span class="line">     m = 100</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   foo()</span><br><span class="line">   console.log(m) // 100</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">function foo() &#123;  var a = b = 10  // =&gt; 转成下面的两行代码  // var a = 10  // b = 10&#125;foo()//console.log(a) // 报错 a is not defined(因为当 foo函数执行完之后，foo的函数执行上下文就会弹出栈(没啦！哪里还会有a呢))console.log(b) // 10</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-从输入-URL-到页面展示-发生了什么？&quot;&gt;1. 从输入 URL 到页面展示 发生了什么？&lt;/h3&gt;
&lt;p&gt;​	总体分为以下过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 域名解析：将域名解析成 IP 地址&lt;/li&gt;
&lt;li&gt;TCP 连接：TCP 三次握手&lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深入 JS 运行原理</title>
    <link href="https://hillyee.github.io/2022/03/30/%E6%B7%B1%E5%85%A5JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://hillyee.github.io/2022/03/30/%E6%B7%B1%E5%85%A5JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</id>
    <published>2022-03-30T05:33:15.330Z</published>
    <updated>2022-03-30T05:32:58.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-从输入-URL-到页面展示-发生了什么？-2">1. 从输入 URL 到页面展示 发生了什么？</h3><p>​总体分为以下过程</p><ul><li>DNS 域名解析：将域名解析成 IP 地址</li><li>TCP 连接：TCP 三次握手</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>断开连接：TCP 四次挥手</li></ul><h3 id="2-浏览器工作原理-2">2. 浏览器工作原理</h3><p>在浏览器中输入查找内容，浏览器是怎样将页面加载出来的？</p><p>大致流程如下：</p><ul><li>首先，用户输入服务器地址，与服务器建立连接</li><li>服务器返回对应的静态资源（index.html）</li><li>然后浏览器拿到 index.html 后进行解析</li><li>当解析时遇到 css 或 js 文件，就向服务器请求并下载对应的 css 和 js 文件</li><li>最后浏览器对页面进行渲染，执行 js 代码</li></ul><h3 id="3-浏览器渲染过程-2">3. 浏览器渲染过程</h3><img src="C:\Users\11219\AppData\Roaming\Typora\typora-user-images\image-20220325160129577.png" alt="image-20220325160129577" style="zoom:80%;" /><ol><li><p>HTML Parser 将 HTML解析转换成 DOM 树</p></li><li><p>CSS Parser 将 样式表转换成 CSS 规则树</p></li><li><p>合并 DOM 树和 CSS 规则树，生成 render（渲染） 树</p></li><li><p>布局 render 树（Layout）</p><p>通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸</p></li><li><p>绘制 render 树（painting），进行 Display 展示</p></li></ol><p>注意图中顶部的紫色 DOM 三角形，实际上是 js 对 DOM 的相关操作。</p><h3 id="4-一个强大的-JavaScript-引擎-—-V8-引擎-2">4. 一个强大的 JavaScript 引擎 — V8 引擎</h3><p>在解析 HTML 的过程中，遇到了 JavaScript 标签，该怎么办呢？</p><ul><li>会停止解析 HTML ，而去加载和执行 JavaScript 代码</li></ul><p>那么，JavaScript 代码由谁来执行呢？</p><ul><li><p>JavaScript 引擎</p><p>高级的编程语言最终都要转成机器指令来执行的，</p><p>所以我们需要 JavaScript 引擎帮助我们将 JavaScript 代码翻译成 CPU 指令来执行</p></li></ul><h4 id="（1）V8-引擎的架构-2">（1）<strong>V8 引擎的架构</strong></h4><img src="C:\Users\11219\AppData\Roaming\Typora\typora-user-images\image-20220325165859884.png" alt="image-20220325165859884" style="zoom:80%;" /><p>V8 的底层架构主要有三个核心模块（Parse、Ignition、TurboFan）</p><p><strong>1. Parse</strong>：</p><p>该过程主要是对 JavaScript 源代码进行<strong>词法分析</strong>和<strong>语法分析</strong>。</p><p><strong>词法分析</strong>：对代码中的每一个词每一个符号进行解析，最终生成很多 tokens</p><p>例如：对 const name = “curry”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先对const进行解析，因为const为一个关键字，所以类型会被记为一个关键词，值为const</span></span><br><span class="line"><span class="attr">tokens</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着对name进行解析，因为name为一个标识符，所以类型会被记为一个标识符，值为name</span></span><br><span class="line"><span class="attr">tokens</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;identifier&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;name&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以此类推...</span></span><br></pre></td></tr></table></figure><p><strong>语法分析</strong>：在词法分析的基础上，拿到 tokens 中的一个个对象，根据不同类型，再进一步分析具体语法，最终生成 AST 抽象语法树</p><p>可以详细查看通过 Parse 转换后的 AST 的工具：AST Explorer</p><p><strong>2. Ignition</strong></p><p>一个解析器，可以将 AST 转换成 ByteCode（字节码）</p><p><strong>3. TurboFan</strong></p><p>一个编译器，可以将字节码编译为 CPU 认识的机器码</p><h4 id="（2）V8-引擎的执行过程-2">（2）V8 引擎的执行过程</h4><p><img src="C:%5CUsers%5C11219%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220325171051967.png" alt="image-20220325171051967"></p><ul><li>Blink 内核将 JS 源码交给 V8 引擎</li><li>Stream 获取到 JS 源码进行编码转换</li><li>Scanner 进行词法分析，将代码转换成 tokens</li><li>Parser 和 PreParser<ul><li>Parser ：直接解析，将 tokens 转成 AST 树</li><li>PreParser：预解析，对不必要的函数进行预解析，也就是只解析暂时需要的内容，而在函数被调用时才进行函数的全量解析</li></ul></li><li>生成 AST 树后，会被 Ignition 转成字节码，之后就是代码的执行过程</li></ul><h3 id="5-JavaScript-的执行过程-2">5. JavaScript 的执行过程</h3><p>假如要执行如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">30</span></span><br><span class="line"><span class="keyword">var</span> result = num1 + num2</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p>（1）首先，<strong>代码被解析</strong>，V8 引擎内部会帮助我们创建一个全局对象：Global Object（GO）</p><ul><li><p>GO 可以访问所有的作用域</p></li><li><p>里面会包含 Date、Array、String、setTimeout等等（所以我们可以直接 new Date() ）</p></li><li><p>GO 还有一个window 属性指向自己（所以window.window.window还是指向 GO自己）</p></li></ul><p>用伪代码表示为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalObject = &#123;</span><br><span class="line">    <span class="title class_">String</span>: 类,</span><br><span class="line">    <span class="attr">setTimeout</span>: 函数,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">window</span>: globalObject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）<strong>然后运行代码</strong></p><ol><li><p>首先我们要知道 js 引擎内部有一个<strong>执行上下文栈</strong>（Execution Context Stack，简称 ESC），它是用于执行代码的调用栈。</p></li><li><p>为了全局代码能够正常执行，首先需要创建一个**全局执行上下文 **（Global Execution Context，简称GEC），全局代码需要被执行时才会创建</p></li><li><p>然后全局执行上下文会被放入执行上下文栈中执行，包含两个部分：</p><ul><li>在代码执行前，会将全局定义的变量，函数等加入到 <strong>GlobalOject</strong> 中，但是并不会赋值（也称为<strong>变量的作用域提升</strong>）</li></ul><p><img src="C:%5CUsers%5C11219%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220325191605422.png" alt="image-20220325191605422"></p><ul><li><p>开始依次执行代码：</p><p>title = “hello” // 赋值</p><p>console.log(num1) // undefined, 不会报错</p><p>num1= 20 …</p></li></ul></li></ol><p><strong>遇到函数如何执行?</strong></p><p>先根据函数体创建一个<strong>函数执行上下文</strong>，并且压入到执行上下文栈中</p><p><strong>作用域链？</strong></p><p>由 VO(变量对象，在函数中就是 AO 对象)和 父级 VO组成，查找时会一层层查找</p><p>看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello Global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message) <span class="comment">// Hello Global</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;Hello Bar&quot;</span></span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><p>比如说这里，当执行 foo 函数的时候， foo 的 AO 中没有message，就会去它的父级 VO 中查找。一定要注意！当第一次代码解析的时候， foo 的函数执行上下文就已经确定了，其中包括三部分：</p><ul><li><p>第一部分：在解析函数成为 AST 树结构的时候，会创建一个 AO（Activation）</p><p>其中包含形参、arguments、函数定义、指向函数对象或定义的变量</p></li><li><p>第二部分：就是作用域链</p></li><li><p>第三部分：this 绑定的值</p></li></ul><p>因此！当foo在自己的AO找不到message的时候，去父级 VO 找，这个父级 VO 就是一开始解析时候保存的 GO，所以message为 “Hello Global”</p><p>简单描述一下这个过程吧：(我不专业的表达)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 GO</span></span><br><span class="line"><span class="attr">GO</span>: &#123;<span class="variable language_">window</span>; <span class="attr">message</span>:<span class="literal">undefined</span>; <span class="attr">foo</span>: 地址<span class="number">1</span>; <span class="attr">bar</span>: 地址<span class="number">2</span>;&#125;</span><br><span class="line"><span class="comment">// 执行代码</span></span><br><span class="line"><span class="attr">GO</span>: &#123;<span class="variable language_">window</span>; <span class="attr">message</span>:<span class="string">&quot;Hello Global&quot;</span>; <span class="attr">foo</span>: 地址<span class="number">1</span>; <span class="attr">bar</span>: 地址<span class="number">2</span>;&#125;</span><br><span class="line">bar函数执行,创建一个函数执行上下文,</span><br><span class="line">其中包括 <span class="variable constant_">VO</span>对象: <span class="attr">AO</span>:&#123;<span class="attr">message</span>: <span class="literal">undefined</span>&#125;</span><br><span class="line">然后开始执行 bar函数</span><br><span class="line"><span class="attr">message</span>:<span class="string">&quot;Hello Bar&quot;</span> (赋值)</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line">  foo函数执行，创建一个foo的函数执行上下文</span><br><span class="line">  其中包括：<span class="attr">VO</span>: <span class="attr">AO</span>: &#123;&#125; </span><br><span class="line">  然后开始执行代码</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">  发现自己的<span class="variable constant_">AO</span>没有message,会向上找，即从自己保存的父级<span class="variable constant_">VO</span>中查找，找到<span class="variable constant_">GO</span>中的message为 <span class="string">&quot;Hello Global&quot;</span></span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C11219%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220325231532928.png" alt="image-20220325231532928"></p><h4 id="几道常见的作用域提升面试题：-2">几道常见的作用域提升面试题：</h4><ol><li><pre><code class="language-js">var n = 100function foo() &#123;  n = 200&#125;foo()console.log(n) // 200<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```js</span><br><span class="line">   function foo() &#123;</span><br><span class="line">     console.log(n) // undefined</span><br><span class="line">     var n = 200</span><br><span class="line">     console.log(n) // 200</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   var n = 100</span><br><span class="line">   foo()</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">var a = 100function foo() &#123;  console.log(a) // undefined  return  var a = 200&#125;foo()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ```js</span><br><span class="line">   function foo() &#123;</span><br><span class="line">     m = 100</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   foo()</span><br><span class="line">   console.log(m) // 100</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">function foo() &#123;  var a = b = 10  // =&gt; 转成下面的两行代码  // var a = 10  // b = 10&#125;foo()//console.log(a) // 报错 a is not defined(因为当 foo函数执行完之后，foo的函数执行上下文就会弹出栈(没啦！哪里还会有a呢))console.log(b) // 10</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-从输入-URL-到页面展示-发生了什么？-2&quot;&gt;1. 从输入 URL 到页面展示 发生了什么？&lt;/h3&gt;
&lt;p&gt;​	总体分为以下过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 域名解析：将域名解析成 IP 地址&lt;/li&gt;
&lt;li&gt;TCP 连接：TCP 三次握手&lt;/li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hillyee.github.io/2022/03/29/hello-world/"/>
    <id>https://hillyee.github.io/2022/03/29/hello-world/</id>
    <published>2022-03-29T14:25:03.367Z</published>
    <updated>2022-03-29T14:25:03.367Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
