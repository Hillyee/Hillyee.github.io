<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hillyee-blog</title>
  
  
  <link href="https://hillyee.github.io/atom.xml" rel="self"/>
  
  <link href="https://hillyee.github.io/"/>
  <updated>2022-03-31T05:22:59.841Z</updated>
  <id>https://hillyee.github.io/</id>
  
  <author>
    <name>Hillyee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试每日练——JS篇</title>
    <link href="https://hillyee.github.io/2022/03/31/%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94JS%E7%AF%87/"/>
    <id>https://hillyee.github.io/2022/03/31/%E9%9D%A2%E8%AF%95%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94JS%E7%AF%87/</id>
    <published>2022-03-31T01:17:39.000Z</published>
    <updated>2022-03-31T05:22:59.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS-数据类型">JS 数据类型</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JS-数据类型&quot;&gt;JS 数据类型&lt;/h3&gt;
</summary>
      
    
    
    
    <category term="面试题-js篇" scheme="https://hillyee.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-js%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>TCP三次握手</title>
    <link href="https://hillyee.github.io/2022/03/30/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <id>https://hillyee.github.io/2022/03/30/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</id>
    <published>2022-03-30T12:11:13.000Z</published>
    <updated>2022-03-31T04:55:03.556Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-TCP-三次握手过程">1. TCP 三次握手过程 ?</h4><p>（首先，两个概念：SYN：同步标志   ACK：确认标志）</p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。进行三次握手：</p><p>第一次握手，客户端给服务器发送一个SYN报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SEND 状态</p><p>第二次握手，服务器收到 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号序列号 ISN，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态</p><p>第三次握手，客户端收到 SYN 报文之后，会回应一个 ACK 报文，也是一样的把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 established 状态</p><p>最后服务器收到 ACK 报文之后，也处于 established 状态，此时，双方建立连接</p><h4 id="2-为什么需要三次握手？两次不行吗？">2. 为什么需要三次握手？两次不行吗？</h4><p>其实这是由 TCP 的自身特点可靠传输决定的。</p><p>第一次握手，客户端发送网络包，服务端收到了，这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的</p><p>第二次握手，服务端发包，客户端收到了。这样客户端就能得出结论：服务端的发送能力、客户端的接收能力是正常的。</p><p>第三次握手，客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送，接收能力也正常。</p><h4 id="3-ISN-是固定的吗">3. (ISN) 是固定的吗?</h4><p>三次握手的一个重要功能是客户端和服务端交换 ISN ，以便让对方知道接下来接受数据的时候如何按序列号组装数据</p><p>如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的</p><h4 id="4-三次握手过程中可以携带数据吗">4. 三次握手过程中可以携带数据吗</h4><p>第三次握手的时候可以携带数据。因为假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据，因为攻击者根本就不理服务器的接收、发送能力是否正常。然后疯狂重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。也就是说，第一次握手可以放数据的话，可能会让服务器更加容易受到攻击。</p><p>而对于第三次的话，客户端已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的，所以携带数据也没问题</p><h4 id="5-四次挥手？为什么要四次？">5. 四次挥手？为什么要四次？</h4><p>刚开始双方都处于 established 状态，假如是客户端先发起关闭请求，则：</p><p>刚开始双方都处于established状态，假如是客户端先发起关闭请求</p><p>第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态</p><p>第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACK报文的序列号值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态</p><p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发送FIN报文，且指定一个序列号。此时服务端处于LAST_ACK的状态</p><p>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的ACK报文之后才会进入CLOSED状态，服务端收到ACK报文之后，就处于关闭连接了，处于CLOSED状态。</p><h4 id="6-SYN-攻击是什么？">6. SYN 攻击是什么？</h4><p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到 SYN 洪泛攻击。SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 则回复确认包，并等待 Client 确认，由于源地址不存在，因此 Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。</p><h5 id="检测-SYN-攻击？">检测 SYN 攻击？</h5><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。</p><h5 id="常见的防御-SYN-攻击的方法？">常见的防御 SYN 攻击的方法？</h5><p>缩短超时时间</p><p>增加最大半连接数</p><p>过滤网关防护</p><p>SYN cookies技术</p><h4 id="7-什么是半连接队列？">7. 什么是半连接队列？</h4><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立起连接，服务器会把此种状态下请求连接放在一个队列里，这种队列称之为半连接队列。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-TCP-三次握手过程&quot;&gt;1. TCP 三次握手过程 ?&lt;/h4&gt;
&lt;p&gt;（首先，两个概念：SYN：同步标志   ACK：确认标志）&lt;/p&gt;
&lt;p&gt;刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。进行三次握手：&lt;/p&gt;
&lt;p&gt;第一次握手，</summary>
      
    
    
    
    <category term="网络传输/" scheme="https://hillyee.github.io/categories/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93/"/>
    
    
    <category term="面试" scheme="https://hillyee.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>var_let_const区别</title>
    <link href="https://hillyee.github.io/2022/03/30/var-let-const%E5%8C%BA%E5%88%AB/"/>
    <id>https://hillyee.github.io/2022/03/30/var-let-const%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-30T12:08:54.000Z</published>
    <updated>2022-03-30T15:39:31.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="var、let、const-相关">var、let、const 相关</h3><p>var（ES5）let,const（ES6）</p><h4 id="1-作用域？"><strong>1. 作用域？</strong></h4><p>简单来说，作用域就是一个独立的地盘，外层作用域无法读取内层作用域的变量，但是内层作用域可以访问外层作用域的变量或者定义外层作用域的同名变量。</p><h4 id="2-var-变量提升？-var-特点？"><strong>2. var 变量提升？ var 特点？</strong></h4><p>无论在全局作用域还是在局部作用域中，使用 var 关键字声明的变量都会被提升到该作用域的最顶部，这就是我们常说的<strong>变量提升</strong></p><p>在代码预编译的时候，JavaScript 引擎会自动将所有代码里面以var 关键字声明的语句提升到<strong>当前作用域</strong>的顶端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;jack&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    name = <span class="string">&quot;jack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;jack&quot;</span></span><br></pre></td></tr></table></figure><h4 id="var-的特点"><strong>var 的特点</strong></h4><ul><li><p>存在变量提升</p></li><li><p>在变量未赋值时，变量为 undefined</p></li><li><p>一个变量可以多次声明，后面的声明会覆盖前面的声明</p></li><li><p>在函数中使用 var 声明变量的时候，该变量是局部的（因为在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)  <span class="comment">// 报错 sum is not defined</span></span><br></pre></td></tr></table></figure><p><strong>如果函数内不使用 var 声明，该变量是全局的</strong>，sum 被添加到全局上下文（window）window.sum</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)  <span class="comment">// 30</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-let">**3. let **</h4><ul><li><p>let 不存在变量提升，let 声明变量前，该变量不能使用(暂时性死区)</p></li><li><p>let 为块级作用域，所有外面的语句块访问不到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value)  <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>let <strong>不允许重复声明</strong>，如果在同一个作用域中某个变量已经存在，再次使用 let 关键字声明的话会报错</p></li></ul><h4 id="4-const"><strong>4. const</strong></h4><p>与 let 没什么大不同</p><ul><li><p>const 声明的是常量，常量就是一旦定义完就不能修改的值。</p></li><li><p>必须初始化值，否则会报错。</p></li><li><p>需要注意的是：const 变量不能再被重新赋值为其他引用值，但对象的键不受限制</p><p>也就是说，并不是变量的值不能改动，而是变量指向的那个内存地址不得改动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line">obj1 = &#123;&#125; <span class="comment">// 报错，不能给常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;tony&quot;</span>  <span class="comment">// 没问题</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-暂时性死区？"><strong>5. 暂时性死区？</strong></h4><p>如果区块中存在 let 和 const 命令，以这个命令声明的变量从一开始就形成了封闭作用域。凡是在声明之前就是用这些变量，就会报错</p><p>总之，在代码块内，使用 let 命令声明变量之前，该变量都是不可用的。这在语法上，称为 “暂时性死区”(temporal dead zone 简称 TDZ )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="comment">// TDZ 开始</span></span><br><span class="line">    tmp = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// 报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tmp; <span class="comment">// TDZ 结束</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp)</span><br><span class="line">    </span><br><span class="line">    tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，在 let 命令声明变量 tmp 之前，都属于变量 tmp 的死区</p><h4 id="6-在-for-循环中使用-var，let-的区别"><strong>6. 在 for 循环中使用 var，let 的区别</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br><span class="line">&#125;  <span class="comment">// 输出全是10</span></span><br><span class="line"><span class="comment">// 因为 i 是全局变量，最后访问的都是全局变量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br><span class="line">&#125;  <span class="comment">// 0123456789; </span></span><br><span class="line"><span class="comment">// i 是局部变量，每次循环改变的是对局部变量赋值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;var、let、const-相关&quot;&gt;var、let、const 相关&lt;/h3&gt;
&lt;p&gt;var（ES5）let,const（ES6）&lt;/p&gt;
&lt;h4 id=&quot;1-作用域？&quot;&gt;&lt;strong&gt;1. 作用域？&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;简单来说，作用域就是一个独</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://hillyee.github.io/categories/JavaScript/"/>
    
    
    <category term="面试" scheme="https://hillyee.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JS" scheme="https://hillyee.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>实现call_apply_bind</title>
    <link href="https://hillyee.github.io/2022/03/30/%E6%89%8B%E5%86%99call-apply-bind/"/>
    <id>https://hillyee.github.io/2022/03/30/%E6%89%8B%E5%86%99call-apply-bind/</id>
    <published>2022-03-30T11:57:16.000Z</published>
    <updated>2022-03-30T15:40:51.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="call、apply、bind-实现">call、apply、bind 实现</h3><h4 id="1-call-实现">1. call 实现</h4><p>首先我们要知道系统的 call 方法主要实现了什么</p><ul><li>执行了函数</li><li>改变了 this 的指向</li></ul><p>先看系统的call方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo函数被执行&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum函数被执行&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 传入对象</span></span><br><span class="line">foo.<span class="title function_">call</span>(&#123;&#125;) </span><br><span class="line"><span class="comment">// 2. 传入null/undefined</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// this自动替换为指向全局对象</span></span><br><span class="line"><span class="comment">// 3. 传入其他，字符串，数字，布尔值等等</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&quot;abc&quot;</span>) <span class="comment">// this 指向相应的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = sum.<span class="title function_">call</span>(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b796e59e07f4560acdbfe38abe4ad79~tplv-k3u1fbpfcp-watermark.image?" alt="img0328_01.png"></p><p>接下来我们开始实现自己的call（主要是实现思路，没有把所有的边缘条件考虑完全，但是基本都有）</p><p><strong>1.1 让函数执行起来</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="variable language_">this</span> <span class="comment">// this就是我们想要执行的函数 foo,把它保存到 fn</span></span><br><span class="line">    <span class="comment">// 接着让函数执行起来</span></span><br><span class="line">    <span class="title function_">fn</span>() <span class="comment">// 但是这里是独立函数调用，this指向window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">mycall</span>() <span class="comment">// 这里相当于mycall隐式绑定了foo,因此 mycall中的this就是foo</span></span><br></pre></td></tr></table></figure><p><strong>2.2 显式绑定this</strong></p><p>现在我们要绑定我们指定的this</p><ul><li>先看第一种：<code>foo.mycall(&#123;name: 'hello'&#125;)</code>，绑定一个对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span>(<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="variable language_">this</span> <span class="comment">// this就是我们想要执行的函数 foo,把它保存到 fn</span></span><br><span class="line">  <span class="comment">// 接着调用这个函数</span></span><br><span class="line">  <span class="comment">// 我们的目的是让函数执行的时候绑定thisArg这个对象执行即thisArg.fn()(隐式绑定)</span></span><br><span class="line">  <span class="comment">// 但是现在 thisArg没有 fn 这个属性呀，怎么调用呢</span></span><br><span class="line">  <span class="comment">// 所以我们可以给thisArg添加一个属性 fn, 值就是我们想要执行的函数</span></span><br><span class="line">  thisArg.<span class="property">fn</span> = fn</span><br><span class="line">  <span class="comment">// 然后再调用</span></span><br><span class="line">  thisArg.<span class="title function_">fn</span>()</span><br><span class="line">  <span class="comment">// 但是这样我们不就让thisArg多出来一个属性fn了吗？</span></span><br><span class="line">  <span class="comment">// 没关系，函数执行完 删掉就好</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果我们传入的不是对象呢？那就不能给thisArg添加属性啦</p><p><code>foo.mycall(&quot;123&quot;)</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span>(<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="variable language_">this</span> </span><br><span class="line">  <span class="comment">// 所以要把 thisArg 转成对象类型(Object构造函数可以将给定的值包装为一个新对象)</span></span><br><span class="line">  thisArg = <span class="title class_">Object</span>(thisArg)</span><br><span class="line">  thisArg.<span class="property">fn</span> = fn</span><br><span class="line">  thisArg.<span class="title function_">fn</span>()</span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果传入的是 null / undefined 呢</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span>(<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="variable language_">this</span> </span><br><span class="line">  <span class="comment">// 如果thisArg传入的是 undefined / null, 应该让它指向全局对象</span></span><br><span class="line">  <span class="comment">// 所以我们要做一个判断</span></span><br><span class="line">  thisArg = (thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span>) ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span></span><br><span class="line">  thisArg.<span class="property">fn</span> = fn</span><br><span class="line">  thisArg.<span class="title function_">fn</span>()</span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.3 接下来要考虑参数了</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rest运算符</span></span><br><span class="line"><span class="comment">// ...args 会把我们传入的参数列表组合到一个数组 [num1,num2]</span></span><br><span class="line"><span class="comment">// ...args 也可以展开数组, 相当于对数组的一个遍历</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span>(<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="variable language_">this</span> </span><br><span class="line">  thisArg = (thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span>) ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span></span><br><span class="line">  thisArg.<span class="property">fn</span> = fn</span><br><span class="line">  <span class="comment">// 把参数传入函数，并用 result 接收函数执行完的结果(例子中就是sum函数执行完的结果)</span></span><br><span class="line">  <span class="keyword">let</span> result = thisArg.<span class="title function_">fn</span>(...args) <span class="comment">// ...[num1, num2] --&gt; num1, num2</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">  <span class="comment">// 最后把结果返回出去</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，基本的call就已经实现了</p><p>检验一下叭</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo.<span class="title function_">mycall</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>&#125;)</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="literal">undefined</span>)</span><br><span class="line">foo.<span class="title function_">mycall</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">sum.<span class="title function_">mycall</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>&#125;, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">let</span> res1 = sum.<span class="title function_">mycall</span>(<span class="number">123</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d4b709b153349f7afbde95a6b9af35c~tplv-k3u1fbpfcp-watermark.image?" alt="image0328_02.png style=&quot;zoom:70%;&quot;"></p><h4 id="2-apply-实现">2. apply 实现</h4><p>跟 call 类似，只不过参数的处理有不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myapply</span> = <span class="keyword">function</span>(<span class="params">thisArg, argsArray</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  thisArg = (thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span>) ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  thisArg.<span class="property">fn</span> = fn</span><br><span class="line">  <span class="comment">// 没有传argArray,那么argsArray默认为 undefined,那么就不能使用展开运算符了</span></span><br><span class="line">  <span class="comment">// 所以如果没有传入参数, 那么把它初始化为 [], 空数组也是可以展开的 ...[]</span></span><br><span class="line">  argsArray = argsArray || []</span><br><span class="line">  <span class="keyword">let</span> result = thisArg.<span class="title function_">fn</span>(...argsArray)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-bind-实现">3. bind 实现</h4><p>bind 需要我们返回一个新的函数，并且调用 bind 的时候不需要执行函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mybind</span> = <span class="keyword">function</span>(<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  thisArg = (thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span>) ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    thisArg.<span class="property">fn</span> = fn</span><br><span class="line">    <span class="keyword">let</span> result = thisArg.<span class="title function_">fn</span>(...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind 需要返回一个新的函数 你也可以直接 return function() &#123;...&#125;</span></span><br><span class="line">  <span class="keyword">return</span> newFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体上也差不多，但我们可以就下面这种情况改进一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum2</span>(<span class="params">num1, num2, num3, num4</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum2函数被执行&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> num1 + num2 + num3 + num4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newSum2 = sum2.<span class="title function_">mybind</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">10</span>,<span class="number">20</span>) <span class="comment">// 绑定的时候传入了两个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">newSum2</span>(<span class="number">30</span>,<span class="number">40</span>)); <span class="comment">// 使用新返回的函数的时候再传入剩余的参数</span></span><br></pre></td></tr></table></figure><p>这种情况，我们就需要把两次传入的参数合并起来，再调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mybind</span> = <span class="keyword">function</span>(<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  thisArg = (thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span>) ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">...newArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 合并传入的参数</span></span><br><span class="line">    <span class="keyword">let</span> allArgs = [...args, ...newArgs]</span><br><span class="line"></span><br><span class="line">    thisArg.<span class="property">fn</span> = fn</span><br><span class="line">    <span class="keyword">let</span> result = thisArg.<span class="title function_">fn</span>(...allArgs)</span><br><span class="line">    <span class="keyword">delete</span> thisArg.<span class="property">fn</span></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，基本的bind也实现了</p><p>最后说明一下，实现的思路是这样，但是方法不唯一的，可能还有一些边边角角没有考虑到的话，可以自己添加进去</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;call、apply、bind-实现&quot;&gt;call、apply、bind 实现&lt;/h3&gt;
&lt;h4 id=&quot;1-call-实现&quot;&gt;1. call 实现&lt;/h4&gt;
&lt;p&gt;首先我们要知道系统的 call 方法主要实现了什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行了函数&lt;/li&gt;
</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://hillyee.github.io/categories/JavaScript/"/>
    
    
    <category term="JS高级" scheme="https://hillyee.github.io/tags/JS%E9%AB%98%E7%BA%A7/"/>
    
    <category term="面试" scheme="https://hillyee.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS函数的this指向</title>
    <link href="https://hillyee.github.io/2022/03/30/JS%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91/"/>
    <id>https://hillyee.github.io/2022/03/30/JS%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91/</id>
    <published>2022-03-30T11:55:56.000Z</published>
    <updated>2022-03-30T15:41:57.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS-函数的-this-指向">JS 函数的 this 指向</h3><h4 id="1-this-在全局作用域下的指向">1. this 在全局作用域下的指向</h4><p>在浏览器中，this在全局作用域下指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">title</span>) <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">title</span>) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h4 id="2-this-的四个绑定规则">2. this 的四个绑定规则</h4><h4 id="2-1-规则一：默认绑定">2.1 规则一：默认绑定</h4><p>在<strong>独立函数调用</strong>的情况下会使用默认绑定</p><p>独立函数调用简单来说就是它没有绑定到某个对象上进行调用，简单看几个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">foo1</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">foo2</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo3</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例3</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj.<span class="property">foo</span></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>以上的函数调用的时候，都是没有被绑定到对象中调用的，所以 this 都指向 window</p><h4 id="2-2-规则二：隐式绑定">2.2 规则二：隐式绑定</h4><p>函数通过某个对象进行调用的时候，这个对象会被 js 引擎绑定到函数中的 this 里</p><p>下面看几个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>() <span class="comment">// obj 对象</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: obj1.<span class="property">foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2.<span class="title function_">bar</span>() <span class="comment">// obj2对象</span></span><br></pre></td></tr></table></figure><h4 id="2-3-显式绑定">2.3 显式绑定</h4><p>利用 call，apply，bind手动指定 this 的绑定，这种明确的绑定称为显示绑定</p><p><strong>(1) call，apply</strong></p><p>call，apply 都是可以调用函数的</p><p>fn.call(自定的this指向，参数1，参数2)  fn.apply(this指向，[参数1，参数2])</p><p>两者的区别在于传参的方式，下面例子可以看出来 call 传入参数列表，apply是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2 + num3, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum.<span class="title function_">call</span>(<span class="string">&quot;123&quot;</span>, <span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>) <span class="comment">// 手动让this指向&quot;123&quot;</span></span><br><span class="line">sum.<span class="title function_">apply</span>(obj, [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]) <span class="comment">// 手动让this指向obj</span></span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc769b40fc274f32b225566e2b2dec07~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220327114447032.png"></p><p><strong>(2) bind</strong></p><p>bind不会调用函数，而是返回一个新的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2 + num3, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var obj = &#123;</span></span><br><span class="line"><span class="comment">//   title: &quot;hello&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.call(&quot;123&quot;, 20,30,40) // 手动让this指向&quot;123&quot;</span></span><br><span class="line"><span class="comment">// sum.apply(obj, [20,30,40]) // 手动让this指向obj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newSum = sum.<span class="title function_">bind</span>(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"><span class="title function_">newSum</span>() <span class="comment">// 60 String &#123;&#x27;aaa&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>咦？newSum 不也是独立函数调用吗，怎么不指向 window 了</p><p>这就是默认绑定和显示绑定bind的冲突，显示绑定的优先级更高！</p><h4 id="2-4-new绑定">2.4 new绑定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="comment">// 实际上这里是会把 this 返回出去的,即return this（默认）</span></span><br><span class="line">  <span class="comment">// this = 创建出来的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 会创建一个全新的对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jenny&quot;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tony&quot;</span>, <span class="number">15</span>)</span><br></pre></td></tr></table></figure><h4 id="3-一些内置函数的-this-绑定">3. 一些内置函数的 this 绑定</h4><p>有时候我们会调用一些 JS 的内置函数，这些函数要求我们传入另外一个函数，并且我们不会自己去调用这些函数，而是 JS 内部会帮助我们执行。</p><p>这个时候，this 的绑定就跟内部帮我们指向函数的方式有关系了。</p><p>看几个例子吧</p><h5 id="3-1-setTimeout">3.1 setTimeout</h5><p>内部通过 apply 调用函数，并绑定了this对象，是window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h5 id="3-2-数组的内置函数-forEach">3.2 数组的内置函数 forEach</h5><p>默认情况下传入的函数是自动调用函数（默认绑定）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 三次 window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以通过传入第二个参数，改变this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 三次 &#x27;obj&#x27;</span></span><br><span class="line">&#125;, <span class="string">&#x27;obj&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-3-点击事件">3.3 点击事件</h5><p>在发生点击时，回调函数被调用，会将 this 绑定到该函数中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span><br><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// box对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说，某些内置的函数，我们很难确定它内部是如何调用传入的回调函数的，可以自己测试一下，记一下，看源码当然更好啦</p><h4 id="4-几个规则的优先级">4. 几个规则的优先级</h4><p>从高到低：new绑定 &gt; 显式绑定(bind) &gt; 隐式绑定 &gt; 默认绑定</p><p>new绑定和call，apply是不允许同时使用的，（毕竟都会调用函数），所以不存在谁的优先级更高</p><ul><li><p>显示绑定高于隐式绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式绑定和隐式绑定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj 对象</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">call</span>(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// &#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>new 绑定高于隐式绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">foo</span>() <span class="comment">// 输出 foo 对象而不是 obj</span></span><br></pre></td></tr></table></figure></li><li><p>new 绑定高于bind</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, title);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj) <span class="comment">// 显式绑定obj</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">bar</span>() <span class="comment">// 打印 foo对象 而不是 obj</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-两种特殊情况">5. 两种特殊情况</h4><p><strong>5.1 在显示绑定中传入 null 或 undefined</strong></p><p>这时候，显示绑定会被忽略，使用默认规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(obj) <span class="comment">// obj</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// window</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p><strong>5.2 间接函数引用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先来看一下这个赋值的结果, 是 foo 函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)); <span class="comment">// foo函数</span></span><br><span class="line"><span class="comment">// 这种叫做间接函数引用，是会把赋值语句右边的结果返回，然后直接调用，是独立函数调用</span></span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)() <span class="comment">// 相当于直接调用 foo 函数，所以是默认绑定，输出window</span></span><br></pre></td></tr></table></figure><h4 id="6-箭头函数的this">6. 箭头函数的this</h4><p>箭头函数不绑定 this，也就是说它没有自己的 this，而是根据外层作用域来决定this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在这里this的外层作用域就是 window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// window</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">call</span>(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>再来看一个案例：</p><p>使用<strong>setTimeout</strong>模拟一个网络请求，如果我们想把返回来的数据保存到 data 中，该怎么做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj 对象</span></span><br><span class="line">      <span class="comment">// 这里的 this 不是应该指向window吗？</span></span><br><span class="line">      <span class="comment">// 如果我们这里使用的是普通的函数 function() &#123;console.log(this)&#125;</span></span><br><span class="line">      <span class="comment">// 那么这个函数在内部调用的时候，会绑定this，就是window</span></span><br><span class="line">      <span class="comment">// 但是我们使用了箭头函数，它不绑定this，会往上层作用域中找到对应的this</span></span><br><span class="line">      <span class="comment">// 所以找到了 obj</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = <span class="string">&#x27;hello&#x27;</span> <span class="comment">// --&gt; obj.data = &quot;hello&quot;</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><h4 id="7-this-的面试题">7. this 的面试题</h4><p>如果每题都会了，那么 this 绑定的问题，就是你的送分题而不是送命题了哈哈哈</p><p>建议把我的答案跟注释都删掉，自己一点点理清哦</p><p><strong>题一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>; <span class="comment">// window.name = &quot;window&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">sss</span>(); <span class="comment">// window 很明显是独立函数调用,没有与任何对象关联</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">// person 隐式绑定,与person关联</span></span><br><span class="line">  (person.<span class="property">sayName</span>)(); <span class="comment">// person 同上(加括号只是代表这是一个整体)</span></span><br><span class="line">  <span class="comment">// console.log((b = person.sayName)); // 这里实际上就是sayName这个函数</span></span><br><span class="line">  (b = person.<span class="property">sayName</span>)(); <span class="comment">// 间接函数引用，是独立函数调用, 输出 window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p><strong>题二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">foo3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定person1对象</span></span><br><span class="line">person1.<span class="title function_">foo1</span>(); <span class="comment">// person1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式绑定person2</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2);  <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数不适用任何规则, 向上层作用域中找this</span></span><br><span class="line">person1.<span class="title function_">foo2</span>(); <span class="comment">// window</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo3()返回了一个函数，然后独立调用</span></span><br><span class="line">person1.<span class="title function_">foo3</span>()(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo3.call(person2) 返回的是一个函数，然后独立调用</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo3()返回一个函数，然后显式绑定到 person2</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2); <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo4()返回一个箭头函数，往上层作用域找，找到foo4中绑定的this,是 person1</span></span><br><span class="line">person1.<span class="title function_">foo4</span>()(); <span class="comment">// person1</span></span><br><span class="line"><span class="comment">// foo4显示绑定到 person2</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// person2</span></span><br><span class="line"><span class="comment">// person1.foo4()返回箭头函数，往上层作用域找</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2); <span class="comment">// person1</span></span><br></pre></td></tr></table></figure><p><strong>题三</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo2</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo4</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo1</span>() <span class="comment">// person1 隐式绑定</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2) <span class="comment">// person2 显式绑定</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>() <span class="comment">// person1 隐式绑定</span></span><br><span class="line"><span class="comment">// 箭头函数不适用显式绑定规则，直接向上层作用域找</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2) <span class="comment">// person1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo3() 返回一个函数，在全局调用</span></span><br><span class="line">person1.<span class="title function_">foo3</span>()() <span class="comment">// window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)() <span class="comment">// window // 同理</span></span><br><span class="line"><span class="comment">// person1.foo3() 返回的函数使用 .call 显式绑定 person2</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2) <span class="comment">//person2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo4() 返回一个箭头函数，再调用，向上层作用域找</span></span><br><span class="line">person1.<span class="title function_">foo4</span>()() <span class="comment">// person1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo4.call(person2) 返回箭头函数，并且foo4显式绑定this为person2</span></span><br><span class="line"><span class="comment">// 再调用这个箭头函数，向上找就找到 foo4 的this 为person2</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)() <span class="comment">// person2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo4() 返回箭头函数,不适用显式绑定，向上找到 person1</span></span><br><span class="line"><span class="comment">// 注意这里跟上面的区别，这里的foo4调用不是.call调用的，而是.foo4()这样调用的</span></span><br><span class="line"><span class="comment">// call是来调用箭头函数的，而箭头函数不适用显式绑定，向上找到的是person1</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2) <span class="comment">// person1</span></span><br></pre></td></tr></table></figure><p><strong>题四</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.obj.foo1()返回一个函数，在全局中调用</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>()() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// person1.obj.foo1.call(person2) 返回一个函数 在全局中调用</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// person1.obj.foo1() 返回一个函数，显式绑定person2</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>().<span class="title function_">call</span>(person2) <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数调用，向上找到 foo2 中的this是obj</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>()() <span class="comment">// obj</span></span><br><span class="line"><span class="comment">// foo2调用的时候显式绑定person2，箭头函数向上层找到的就是person2</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)() <span class="comment">// person2</span></span><br><span class="line"><span class="comment">// 箭头函数不适用 显式绑定，向上找找到 obj</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>().<span class="title function_">call</span>(person2) <span class="comment">// obj</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JS-函数的-this-指向&quot;&gt;JS 函数的 this 指向&lt;/h3&gt;
&lt;h4 id=&quot;1-this-在全局作用域下的指向&quot;&gt;1. this 在全局作用域下的指向&lt;/h4&gt;
&lt;p&gt;在浏览器中，this在全局作用域下指向 window&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://hillyee.github.io/categories/JavaScript/"/>
    
    
    <category term="JS高级" scheme="https://hillyee.github.io/tags/JS%E9%AB%98%E7%BA%A7/"/>
    
    <category term="面试" scheme="https://hillyee.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS内存管理和闭包</title>
    <link href="https://hillyee.github.io/2022/03/30/JS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>https://hillyee.github.io/2022/03/30/JS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/</id>
    <published>2022-03-30T11:53:40.000Z</published>
    <updated>2022-03-30T15:41:30.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JS-的内存管理">一、JS 的内存管理</h2><h4 id="1-JS-的内存管理">1. JS 的内存管理</h4><ul><li>JavaScript 会在定义变量时为我们分配内存</li><li>内存分配的方式是一样的吗？<ul><li>JS 对于基本数据类型内存的分配，会在执行时直接在栈空间进行分配</li><li>JS 对于复杂数据类型内存的分配，会在堆内存中开辟一块空间，并且将这块空间的地址保存在栈空间</li></ul></li></ul><h4 id="2-JS-的垃圾回收">2. JS 的垃圾回收</h4><ul><li>垃圾回收的英文是 Garbage Collection，简称 GC</li><li>对于那些不再使用的对象，我们都称之为垃圾，它需要被回收，以释放出更多的内存空间</li><li>JavaScript的运行环境 js引擎都会内存垃圾回收器</li></ul><h4 id="3-常见的两个-GC-算法">3. 常见的两个 GC 算法</h4><p>GC怎么知道哪些对象是不再使用的呢？这里就要用到 GC 算法了</p><h5 id="3-1-引用计数"><strong>3.1 引用计数</strong></h5><ul><li><p>当一个对象有一个引用指向它的时候，那么这个对象的引用就 +1，当一个对象的引用为 0 时，这个对象就可以被回收掉</p></li><li><p>但是这个算法有一个很大的弊端，就是会产生循环引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">friend</span>: obj2&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">friend</span>: obj1&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5ae097e453a43cc84b2ff11211ac823~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220326000211839.png"></p><hr><h5 id="3-2-标记清除">3.2 标记清除</h5><ul><li>这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找到所有从根开始有引用到的对象，对于那些没有引用到的对象，就认为是不可用的对象</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16ee47dfe794e74a2cef9747d341bcc~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220326000504460.png"></p><p>​图中从 A 开始找，找到 D 的时候结束，M,N不可达，被认为是不可用的对象</p><ul><li>这个算法可以很好的解决循环引用的问题</li></ul><p>注：JS 引擎比较广泛采用的就是标记清除算法，当然类似于 V8 引擎为了进行更好的优化，在算法的实现细节上也会结合一些其他的算法</p><h2 id="二、JS中的闭包">二、JS中的闭包</h2><h4 id="1-什么是闭包？">1. 什么是闭包？</h4><p>JavaScript 中的一个函数，如果它访问了外层作用域的变量，那么这个函数是一个闭包。</p><p>MDN中的一个解释：一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;foo&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name)<span class="comment">// name访问了外层作用域的变量name</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// age访问了外层作用域的变量age</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bar <span class="comment">// 返回一个函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h4 id="2-闭包的访问过程">2. 闭包的访问过程</h4><p>简单描述上面函数的执行过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="attr">GO</span>: &#123;<span class="attr">foo</span>:地址<span class="number">1</span>, <span class="attr">fn</span>:<span class="literal">undefined</span>&#125;</span><br><span class="line"><span class="number">2.</span> 执行代码：</span><br><span class="line">   <span class="number">2.1</span> <span class="title function_">foo</span>():只要执行函数，就会创建一个函数执行上下文</span><br><span class="line">     (<span class="number">1</span>)<span class="attr">VO</span>: &#123;<span class="variable constant_">AO</span>对象:&#123;<span class="attr">name</span>: <span class="literal">undefined</span>;<span class="attr">age</span>:<span class="literal">undefined</span>;<span class="attr">bar</span>:地址<span class="number">2</span>&#125;&#125;</span><br><span class="line">        <span class="attr">scopechain</span>:[<span class="variable constant_">VO</span>+parent scopes]</span><br><span class="line"> (<span class="number">2</span>)开始执行代码 &#123;<span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>;&#125; <span class="keyword">return</span> bar地址<span class="number">2</span></span><br><span class="line"> (<span class="number">3</span>)foo执行完毕</span><br><span class="line">   <span class="number">2.2</span> <span class="attr">fn</span>: bar地址<span class="number">2</span></span><br><span class="line">   <span class="number">2.3</span> <span class="title function_">fn</span>(),即执行 bar地址<span class="number">2</span>中的函数执行体,创建bar的函数执行上下文</span><br><span class="line">      (<span class="number">1</span>)&#123;<span class="attr">AO</span>:&#123;&#125;,scopechain&#125;</span><br><span class="line">       (<span class="number">2</span>)执行代码:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name):在自己的<span class="variable constant_">AO</span>中找不到，通过作用域链找到foo的<span class="variable constant_">AO</span>，找到<span class="attr">name</span>:<span class="string">&quot;foo&quot;</span>,输出 <span class="string">&quot;foo&quot;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age)同理</span><br><span class="line">   (<span class="number">3</span>)<span class="title function_">fn</span>()执行完毕</span><br><span class="line"><span class="number">3.</span>执行完毕</span><br><span class="line">地址<span class="number">1</span>:foo函数对象: &#123;<span class="attr">parentScope</span>: <span class="variable constant_">GO</span>&#125;,&#123;foo函数的执行体&#125;</span><br><span class="line">地址<span class="number">2</span>:bar函数对象: &#123;<span class="attr">parentScope</span>: foo的<span class="variable constant_">AO</span>对象&#125;,&#123;bar函数的执行体&#125;</span><br></pre></td></tr></table></figure><p>你可能会有疑惑：foo函数执行完毕之后，不是应该弹出栈吗，foo的AO对象不应该被释放了吗？怎么bar还能找到 name，找到 age 呢？</p><p>看下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0596bf34709b420e83d0b18255b35a8e~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220326190828378.png"></p><p>可以看到，当我们执行完 foo 函数的时候，返回的是 bar 函数(或者说是bar的地址)，然后因为 <code>fn = foo()</code>，把这个地址赋值给了fn，因此会存在 fn 指向 bar函数对象，而bar的父作用域又指向了 foo 的AO对象，因此foo的AO是不会被释放的</p><h4 id="3-闭包的内存泄漏">3. 闭包的内存泄漏</h4><p><strong>为什么总说闭包是有内存泄漏的呢？什么是内存泄漏？</strong></p><p>拿上面的例子说，如果后续我们不会再用 foo，bar 这些函数了，但是在全局作用域下 fn 变量对bar函数对象有引用，而bar的作用域中AO对foo的AO有引用，所以会造成这些内存都是无法被释放的。</p><p>这就是我们所说的内存泄漏，其实就是刚才的引用链中的对象无法释放</p><p><strong>怎么解决这个问题呢？</strong></p><p>很简单，设置 fn = null，就不再对 bar 函数对象有引用，那么从GO出发，bar是不可达的，那么对应的AO对象(foo) 同样也就不可达。</p><p>在下一次 GC 的的检测中，它们就会被销毁掉</p><p><strong>还有一个问题，形成闭包之后，是不是所有的属性都不会被释放呢？</strong></p><p>还是这个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">    <span class="comment">// console.log(age) </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>如果age不使用了，会不会被销毁掉呢？<br>答案是会的，测试如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddf0ce1e854b45628e802630620b740b~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220327110308371.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8ae9ba0420c41a0bc10be84501afbd4~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220327110407999.png"></p><p>这是因为 V8 引擎做的优化，因为规范中闭包的属性应该是不会被销毁的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、JS-的内存管理&quot;&gt;一、JS 的内存管理&lt;/h2&gt;
&lt;h4 id=&quot;1-JS-的内存管理&quot;&gt;1. JS 的内存管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 会在定义变量时为我们分配内存&lt;/li&gt;
&lt;li&gt;内存分配的方式是一样的吗？
&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://hillyee.github.io/categories/JavaScript/"/>
    
    
    <category term="JS高级" scheme="https://hillyee.github.io/tags/JS%E9%AB%98%E7%BA%A7/"/>
    
    <category term="面试" scheme="https://hillyee.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>深入JS运行原理</title>
    <link href="https://hillyee.github.io/2022/03/30/%E6%B7%B1%E5%85%A5JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://hillyee.github.io/2022/03/30/%E6%B7%B1%E5%85%A5JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</id>
    <published>2022-03-30T10:49:46.000Z</published>
    <updated>2022-03-30T15:40:16.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-从输入-URL-到页面展示-发生了什么？">1. 从输入 URL 到页面展示 发生了什么？</h3><p>总体分为以下过程：</p><ul><li>DNS 域名解析：将域名解析成 IP 地址</li><li>TCP 连接：TCP 三次握手</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>断开连接：TCP 四次挥手</li></ul><h3 id="2-浏览器工作原理">2. 浏览器工作原理</h3><p>在浏览器中输入查找内容，浏览器是怎样将页面加载出来的？</p><p>大致流程如下：</p><ul><li>首先，用户输入服务器地址，与服务器建立连接</li><li>服务器返回对应的静态资源（index.html）</li><li>然后浏览器拿到 index.html 后进行解析</li><li>当解析时遇到 css 或 js 文件，就向服务器请求并下载对应的 css 和 js 文件</li><li>最后浏览器对页面进行渲染，执行 js 代码</li></ul><h3 id="3-浏览器渲染过程">3. 浏览器渲染过程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fceb0c8f81764c578d11e3b428d9ec61~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325160129577.png"></p><ol><li><p>HTML Parser 将 HTML解析转换成 DOM 树</p></li><li><p>CSS Parser 将 样式表转换成 CSS 规则树</p></li><li><p>合并 DOM 树和 CSS 规则树，生成 render（渲染） 树</p></li><li><p>布局 render 树（Layout）</p><p>通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸</p></li><li><p>绘制 render 树（painting），进行 Display 展示</p></li></ol><p>注意图中顶部的紫色 DOM 三角形，实际上是 js 对 DOM 的相关操作。</p><h3 id="4-一个强大的-JavaScript-引擎-—-V8-引擎">4. 一个强大的 JavaScript 引擎 — V8 引擎</h3><p>在解析 HTML 的过程中，遇到了 JavaScript 标签，该怎么办呢？</p><ul><li>会停止解析 HTML ，而去加载和执行 JavaScript 代码</li></ul><p>那么，JavaScript 代码由谁来执行呢？</p><ul><li><p>JavaScript 引擎</p><p>高级的编程语言最终都要转成机器指令来执行的，</p><p>所以我们需要 JavaScript 引擎帮助我们将 JavaScript 代码翻译成 CPU 指令来执行</p></li></ul><h4 id="（1）V8-引擎的架构">（1）<strong>V8 引擎的架构</strong></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5b0f83a00e64e2587ab3d79a4c524fd~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325165859884.png"></p><p>V8 的底层架构主要有三个核心模块（Parse、Ignition、TurboFan）</p><p><strong>1. Parse</strong>：</p><p>该过程主要是对 JavaScript 源代码进行<strong>词法分析</strong>和<strong>语法分析</strong>。</p><p><strong>词法分析</strong>：对代码中的每一个词每一个符号进行解析，最终生成很多 tokens</p><p>例如：对 const name = “curry”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先对const进行解析，因为const为一个关键字，所以类型会被记为一个关键词，值为const</span></span><br><span class="line"><span class="attr">tokens</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着对name进行解析，因为name为一个标识符，所以类型会被记为一个标识符，值为name</span></span><br><span class="line"><span class="attr">tokens</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;identifier&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;name&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以此类推...</span></span><br></pre></td></tr></table></figure><p><strong>语法分析</strong>：在词法分析的基础上，拿到 tokens 中的一个个对象，根据不同类型，再进一步分析具体语法，最终生成 AST 抽象语法树</p><p>可以详细查看通过 Parse 转换后的 AST 的工具：AST Explorer</p><p><strong>2. Ignition</strong></p><p>一个解析器，可以将 AST 转换成 ByteCode（字节码）</p><p><strong>3. TurboFan</strong></p><p>一个编译器，可以将字节码编译为 CPU 认识的机器码</p><h4 id="（2）V8-引擎的执行过程">（2）V8 引擎的执行过程</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f816f1a12884ef6bf8fe4ffec33a2ce~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325171051967.png"></p><ul><li>Blink 内核将 JS 源码交给 V8 引擎</li><li>Stream 获取到 JS 源码进行编码转换</li><li>Scanner 进行词法分析，将代码转换成 tokens</li><li>Parser 和 PreParser<ul><li>Parser ：直接解析，将 tokens 转成 AST 树</li><li>PreParser：预解析，对不必要的函数进行预解析，也就是只解析暂时需要的内容，而在函数被调用时才进行函数的全量解析</li></ul></li><li>生成 AST 树后，会被 Ignition 转成字节码，之后就是代码的执行过程</li></ul><h3 id="5-JavaScript-的执行过程">5. JavaScript 的执行过程</h3><p>假如要执行如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">30</span></span><br><span class="line"><span class="keyword">var</span> result = num1 + num2</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p>（1）首先，<strong>代码被解析</strong>，V8 引擎内部会帮助我们创建一个全局对象：Global Object（GO）</p><ul><li><p>GO 可以访问所有的作用域</p></li><li><p>里面会包含 Date、Array、String、setTimeout等等（所以我们可以直接 new Date() ）</p></li><li><p>GO 还有一个window 属性指向自己（所以window.window.window还是指向 GO自己）</p></li></ul><p>用伪代码表示为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalObject = &#123;</span><br><span class="line">    <span class="title class_">String</span>: 类,</span><br><span class="line">    <span class="attr">setTimeout</span>: 函数,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">window</span>: globalObject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）<strong>然后运行代码</strong></p><ol><li><p>首先我们要知道 js 引擎内部有一个<strong>执行上下文栈</strong>（Execution Context Stack，简称 ESC），它是用于执行代码的调用栈。</p></li><li><p>为了全局代码能够正常执行，首先需要创建一个**全局执行上下文 **（Global Execution Context，简称GEC），全局代码需要被执行时才会创建</p></li><li><p>然后全局执行上下文会被放入执行上下文栈中执行，包含两个部分：</p><ul><li>在代码执行前，会将全局定义的变量，函数等加入到 <strong>GlobalOject</strong> 中，但是并不会赋值（也称为<strong>变量的作用域提升</strong>）</li></ul></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/848e146926d641b99e2b502e31c08913~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325191605422.png"></p><ul><li><p>开始依次执行代码：</p><p>title = “hello” // 赋值</p><p>console.log(num1) // undefined, 不会报错</p><p>num1= 20 …</p></li></ul><p><strong>遇到函数如何执行?</strong></p><p>先根据函数体创建一个<strong>函数执行上下文</strong>，并且压入到执行上下文栈中</p><p><strong>作用域链？</strong></p><p>由 VO(变量对象，在函数中就是 AO 对象)和 父级 VO组成，查找时会一层层查找</p><p>看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello Global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message) <span class="comment">// Hello Global</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;Hello Bar&quot;</span></span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><p>比如说这里，当执行 foo 函数的时候， foo 的 AO 中没有message，就会去它的父级 VO 中查找。一定要注意！当第一次代码解析的时候， foo 的函数执行上下文就已经确定了，其中包括三部分：</p><ul><li><p>第一部分：在解析函数成为 AST 树结构的时候，会创建一个 AO（Activation）</p><p>其中包含形参、arguments、函数定义、指向函数对象或定义的变量</p></li><li><p>第二部分：就是作用域链</p></li><li><p>第三部分：this 绑定的值</p></li></ul><p>因此！当foo在自己的AO找不到message的时候，去父级 VO 找，这个父级 VO 就是一开始解析时候保存的 GO，所以message为 “Hello Global”</p><p>简单描述一下这个过程吧：(我不专业的表达)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 GO</span></span><br><span class="line"><span class="attr">GO</span>: &#123;<span class="variable language_">window</span>; <span class="attr">message</span>:<span class="literal">undefined</span>; <span class="attr">foo</span>: 地址<span class="number">1</span>; <span class="attr">bar</span>: 地址<span class="number">2</span>;&#125;</span><br><span class="line"><span class="comment">// 执行代码</span></span><br><span class="line"><span class="attr">GO</span>: &#123;<span class="variable language_">window</span>; <span class="attr">message</span>:<span class="string">&quot;Hello Global&quot;</span>; <span class="attr">foo</span>: 地址<span class="number">1</span>; <span class="attr">bar</span>: 地址<span class="number">2</span>;&#125;</span><br><span class="line">bar函数执行,创建一个函数执行上下文,</span><br><span class="line">其中包括 <span class="variable constant_">VO</span>对象: <span class="attr">AO</span>:&#123;<span class="attr">message</span>: <span class="literal">undefined</span>&#125;</span><br><span class="line">然后开始执行 bar函数</span><br><span class="line"><span class="attr">message</span>:<span class="string">&quot;Hello Bar&quot;</span> (赋值)</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line">  foo函数执行，创建一个foo的函数执行上下文</span><br><span class="line">  其中包括：<span class="attr">VO</span>: <span class="attr">AO</span>: &#123;&#125; </span><br><span class="line">  然后开始执行代码</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">  发现自己的<span class="variable constant_">AO</span>没有message,会向上找，即从自己保存的父级<span class="variable constant_">VO</span>中查找，找到<span class="variable constant_">GO</span>中的message为 <span class="string">&quot;Hello Global&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5dfbf8412334fbfbec579813c39c58d~tplv-k3u1fbpfcp-watermark.image?" alt="image-20220325231532928.png"><br>(图来源于coderwhy)</p><h4 id="几道常见的作用域提升面试题：">几道常见的作用域提升面试题：</h4><ol><li><pre><code class="language-js">var n = 100function foo() &#123;  n = 200&#125;foo()console.log(n) // 200<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```js</span><br><span class="line">   function foo() &#123;</span><br><span class="line">     console.log(n) // undefined</span><br><span class="line">     var n = 200</span><br><span class="line">     console.log(n) // 200</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   var n = 100</span><br><span class="line">   foo()</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">var a = 100function foo() &#123;  console.log(a) // undefined  return  var a = 200&#125;foo()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ```js</span><br><span class="line">   function foo() &#123;</span><br><span class="line">     m = 100</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   foo()</span><br><span class="line">   console.log(m) // 100</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">function foo() &#123;  var a = b = 10  // =&gt; 转成下面的两行代码  // var a = 10  // b = 10&#125;foo()//console.log(a) // 报错 a is not defined(因为当 foo函数执行完之后，foo的函数执行上下文就会弹出栈(没啦！哪里还会有a呢))console.log(b) // 10</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-从输入-URL-到页面展示-发生了什么？&quot;&gt;1. 从输入 URL 到页面展示 发生了什么？&lt;/h3&gt;
&lt;p&gt;总体分为以下过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 域名解析：将域名解析成 IP 地址&lt;/li&gt;
&lt;li&gt;TCP 连接：TCP 三次握手&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://hillyee.github.io/categories/JavaScript/"/>
    
    
    <category term="JS高级" scheme="https://hillyee.github.io/tags/JS%E9%AB%98%E7%BA%A7/"/>
    
    <category term="面试" scheme="https://hillyee.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hillyee.github.io/2022/03/29/hello-world/"/>
    <id>https://hillyee.github.io/2022/03/29/hello-world/</id>
    <published>2022-03-29T14:25:03.367Z</published>
    <updated>2022-03-29T14:25:03.367Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
